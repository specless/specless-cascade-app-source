{"version":3,"sources":["modules/updater.js"],"names":[],"mappings":"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","file":"modules/updater.js","sourcesContent":["var UPDATER = (function(my) {\n    var gui = require('nw.gui');\n    var win = gui.Window.get();\n\n    var fs = require(\"fs\")\n    var path = require(\"path\")\n    var request = require(\"request\")\n    var zlib = require(\"zlib\")\n    var tar = require(\"tar\")\n    var archiver = require('archiver');\n\n    // to determine where our package.nw lies we need a bit of trickery (for OSX at least)\n    var findlocal = function() {\n        if (process.platform != \"darwin\")\n            return path.dirname(process.execPath)\n        else\n            return process.execPath.substr(0,process.execPath.indexOf(\"node-webkit.app\")) // I'm open to better ways of doing that\n    }\n\n    var exepath = findlocal()\n\n    my.check_for_update = function(author, repo, success, failure) {\n\n        // we need the author and repo for github\n        if (author && repo) {\n\n            // we check what our local version is (defaulting to something which will ALWAYS update)\n            var local_version = localStorage.UPDATERversion || \"0.00\"\n\n            // we now get the GitHub 'latest releases' page to check if it differs to local_version\n            request({\n                uri: \"http://github.com/\" + author + \"/\" + repo + \"/releases/latest\",\n                headers: {\n                    'Content-Type': 'text/html'\n                }\n            }, function (err, response, body) {\n                if (!err && response.statusCode == 200) {\n\n                    // scrape the latest release-tag from that page\n                    var latest = body.match(new RegExp(\"\\/\" + author + \"\\/\" + repo + \"\\/tree\\/([0-9\\.]+)\"))\n\n                    // assuming we found one\n                    if (latest && latest.length && latest[1] != local_version)\n                        if (success)\n                            success(latest[1])\n                    else\n                        if (failure)\n                            failure()\n\n                } else {\n                    console.log(\"UPDATER error: cannot access GitHub or author/repo not found\")\n                }\n            })\n        } else\n            console.log(\"UPDATER error: requires author and repo\")\n    }\n\n    my.update = function(author, repo, cb) {\n\n        // get the latest_version\n        my.check_for_update(author, repo, function(latest_version) {\n\n            // if it's an update - we update!\n            if (latest_version) {\n\n                // create an output stream to overwrite the existing package.nw\n                var output = fs.createWriteStream(path.join(exepath, \"package.nw\"))\n                    .on('close', function () {\n\n                        // zip now safely written - restart the client\n                        my.restart()\n\n                    })\n                    .on('error', function (err) {\n\n                        // we failed to write package.nw - what to do?\n\n                    });\n\n                // setup archiver to write a zip\n                var archive = archiver('zip');\n                archive.pipe(output);\n\n                // download the source.tar.gz, unpack, strip header and repack as zip\n                req = request(\"http://github.com/\" + author + \"/\" + repo + \"/archive/\" + latest_version + \".tar.gz\").pipe(zlib.createGunzip()).pipe(tar.Parse())\n                    .on(\"entry\", function (e) {\n\n                        // for each file unpacked\n                        if (e.type == 'File') {\n\n                            // create a buffer and an offset\n                            var b = new Buffer(e[\"_header\"].size)\n                            var boff = 0\n\n                            e.on(\"data\", function (d) {\n\n                                // for each block of data - copy it into the buffer and move the offset\n                                d.copy(b, boff)\n                                boff += d.length\n\n                            }).on(\"end\", function () {\n\n                                // all data received - send the file to archiver with the 'header' directory name removed\n                                archive.append(b, {name: e.path.replace(repo + \"-\" + latest_version + '/', '')})\n\n                            })\n                        }\n                    })\n                    .on(\"end\", function () {\n\n                        // store the version we've received\n                        localStorage.UPDATERversion = latest_version\n\n                        // all done - close archiver\n                        archive.finalize()\n\n                    })\n            }\n        })\n    }\n\n    my.restart = function() {\n        // determine path to executable - it's different on OSX\n        var getexecutable = function() {\n            if (process.platform == \"darwin\")\n                return path.join(process.cwd(),\"node-webkit.app\",\"Contents\",\"MacOS\",\"node-webkit\")\n            else\n                return process.execPath\n        }\n\n        // spawn a new child of ourself\n        var child_process = require(\"child_process\");\n        var child = child_process.spawn(getexecutable(), [], {detached: true});\n\n        // orphan it\n        child.unref();\n\n        // quit\n        win.close()\n\n    }\n\n    return my\n\n}(UPDATER||{}));"],"sourceRoot":"/source/"}